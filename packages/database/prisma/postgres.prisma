datasource postgresdb {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRES")
}

generator client {
  provider = "prisma-client-js"
  output = "./generated/postgres-client"
}

model Account {
  id           String    @id @default(uuid()) @map("_id")
  discordId    String    @unique // Link to Discord user ID
  username     String
  email        String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  characters_ids String[] @default([]) // Array of Character IDs (MongoDB)
  @@map("accounts")
}

model QuestDefinition {
  id          String   @id // e.g., "CONSUME_WATER"
  name        String
  description String?
  category    String // e.g., "COMBAT", "MOVEMENT"
  difficulty  String
  prerequisites String[] @default([]) // Array of prerequisite quest IDs
  properties  Json
  @@map("quest_definitions")
}

model AchievementDefinition {
  id          String   @id // e.g., "ACHIEVEMENT_FIRST_LOGIN"
  name        String
  description String?
  type        String // e.g., "GENERAL", "CHARACTER", "ACCOUNT"
  criteria    Json     // JSON object defining the achievement criteria
  iconUrl     String
  properties  Json
  @@map("achievement_definitions")
}

model JournalDefinition {
  id          String   @id // e.g., "JOURNAL_FIRST_ADVENTURE"
  title       String
  content     String
  author      String // e.g., "System", "Player"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  properties  Json
  @@map("journal_definitions")
}

model ItemDefinition {
  id          String   @id // e.g., "ITEM_STICK_BASIC"
  name        String
  description String?
  type        String // e.g., "WEAPON", "CONSUMABLE"
  rarity      String
  stackable   Boolean
  maxStackSize Int?
  iconUrl     String
  properties  Json
  @@map("item_definitions")
}


// Remember to run:
// npx prisma db push --preview-feature // For MongoDB (no migrations needed usually)
// npx prisma migrate dev --name init --preview-feature // For PostgreSQL (creates migration files)
// npx prisma generate // To generate Prisma Client for both